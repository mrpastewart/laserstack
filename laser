#!/bin/bash
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t '

function color_message() {
    COLOR="\033[1;$1m"
    NOCOLOR='\033[0m'
    echo -e "${COLOR} $2: ${NOCOLOR} $3 " >&2
}

function error_message() {
    color_message 31 "ERROR:" "$*"
}

function warning_message() {
    color_message 33 "WARNING:" "$*"
}

current_dir=$(pwd)
# thanks https://stackoverflow.com/questions/3349105/
laser_dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
cd "$laser_dir" || exit
dockerproject=$(basename "$laser_dir")

# source .env file to get MYSQL info and projects directory
if [ -f ./.env ]; then
    # shellcheck disable=SC1091
    source ./.env
else
    warning_message "laser .env file not found, copying .env.example as .env."
    cp ./env.example ./.env
    # shellcheck disable=SC1091
    source ./.env
fi
projects_dir=$(cd "$PROJECTS_DIRECTORY"; pwd)

dc_opts=$(echo $OPTS | sed 's| |.yml -f opt/|g;s|^|-f opt/|;s|$|.yml|;')
dc_params="-f docker-compose.yml $dc_opts"

# thanks https://stackoverflow.com/a/5027832
function relativepath() {
    source=$1
    target=$2
    common_part=$source
    back=
    while [ "${target#$common_part}" = "${target}" ]; do
        common_part=$(dirname "$common_part")
        back="../${back}"
    done
    echo "${back}${target#$common_part/}"
}

function whichproject() {
    project=$(relativepath "$projects_dir" "$current_dir")
    if [[ $project = */* ]] ; then
        error_message "WARNING: expected a subdir of ${projects_dir}. Current dir is ${current_dir}."
        project=""
    fi
    echo "$project"
}

function nih() {
    echo "Still not implemented"
}

function dc() {
    docker-compose $dc_params "$@"
}

function lasercommands() {
    sep="${1:-SEP}"
    if [ "$sep" != "NOSEP" ] ; then
        echo "  -----------------------------------------------------"
    fi
    echo "  artisan            Execute composer commands"
    echo "  composer           Execute composer"
    echo "  dockerhelp         List docker-compose and laser commands"
    echo "  help               List laser commands"
    echo "  mysql              Execute mysql"
    echo "  scan               Scan and identify projects to build nginx configs"
    echo "  node               Execute node"
    echo "  npm                Execute npm"
    echo "  npx                Execute npx"
    echo "  php                Execute php commands in your app container"
    echo "  tinker             Execute php artisan tinker"
    echo "  test               Execute php artisan test"
    echo "  share              Share externally your laser stack"
    echo "  shell              Shell in the app container"
    echo "  appexec            Execute arbitrary commands in the app container"
    echo "  yarn               Execute yarn"
    echo "  stats              top-like docker stats"
}

function dohelp() {
    echo "Manage a local docker stack to run multiple laravel projects."
    echo ""
    echo "Usage:"
    echo "  laser [COMMAND] [ARGS...]"
    echo ""
    echo "Commands:"
    lasercommands NOSEP
    echo "  *                  Any other command goes to docker-compose"
    echo ""
    echo "Some useful docker-compose commands (dockerhelp to full list)"
    echo "  up [-d]            Create and start containers"
    echo "  stop               Stop containers"
    echo "  logs               View output from containers"
    echo "  ps                 List containers running"
    echo ""
}

function dockerhelp() {
    dc help
    lasercommands
}

function stats() {
    docker stats
}

function artisan() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app php artisan "$@"
}

function composer() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app composer "$@"
}

function mysql() {
    if [ -z "$*" ] ; then
        dc exec app bash -c "MYSQL_PWD=${DB_PASSWORD} mysql -h db -u ${DB_USERNAME} ${DB_DATABASE}"
    else
        dc exec app bash -c "MYSQL_PWD=${DB_PASSWORD} mysql -h db -u ${DB_USERNAME} $*"
    fi
}

function stackisup() {
    dc ps -q
}

function restartnginx() {
    dc exec app /usr/bin/supervisorctl restart nginx
}

function restart_nginx_if_up() {
    isup=$(stackisup)
    if [ -n "$isup" ]; then
        echo "Laser Stack is up, restarting nginx."
        restartnginx
    fi
}

function scan() {
    fromscratch="${1:-preserve}"

    local changed=0
    isup=$(stackisup)
    if [ -n "$isup" ]; then
        if [ "$fromscratch" == "--fromscratch" ]; then
            echo "SCAN: starting from scratch"
            rm -f config/nginx/*
        fi
        # shellcheck disable=SC1091
        source libs/sourcedrivers.sh
        changed=$(drivers::scan_projects "${projects_dir}")
        if [ "$changed" -eq "1" ]; then
            echo "SCAN: configuration changed"
            restartnginx
        else
            echo "SCAN: no configuration change $changed"
        fi
    else
        error_message "SCAN: stack need to be up"
    fi
}

function node() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app node "$@"
}

function npm() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app npm "$@"
}

function npx() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app npx "$@"
}

function php() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app php "$@"
}

function tinker() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app php artisan tinker "$@"
}

function dotest() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app php artisan test "$@"
}

function share() {
    project=$1 ; shift
    docker run --rm -it --network "${dockerproject}_laser" --link app wernight/ngrok ngrok http -host-header="$project.test" host.docker.internal:80
}

function shell() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app bash "$@"
}

function appexec() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app "$@"
}

function yarn() {
    project=$1 ; shift
    dc exec --workdir "/var/www/$project" app yarn "$@"
}

set +e
subcommand="${1:-help}"; shift
set -e

case "$subcommand" in
    help)
        dohelp
        ;;
    dockerhelp)
        dockerhelp
        ;;
    mysql)
        mysql "$@"
        ;;
    scan)
        scan "$@"
        ;;
    stats)
        stats "$@"
        ;;
    restartnginx)
        restartnginx "$@"
        ;;
    artisan | art)
        project=$(whichproject)
        artisan "$project" "$@"
        ;;
    composer)
        project=$(whichproject)
        composer "$project" "$@"
        ;;
    node)
        project=$(whichproject)
        node "$project" "$@"
        ;;
    npm)
        project=$(whichproject)
        npm "$project" "$@"
        ;;
    npx)
        project=$(whichproject)
        npx "$project" "$@"
        ;;
    php)
        project=$(whichproject)
        php "$project" "$@"
        ;;
    tinker)
        project=$(whichproject)
        tinker "$project" "$@"
        ;;
    test)
        project=$(whichproject)
        dotest "$project" "$@"
        ;;
    share)
        project=$(whichproject)
        share "$project" "$@"
        ;;
    shell)
        project=$(whichproject)
        shell "$project" "$@"
        ;;
    appexec)
        project=$(whichproject)
        appexec "$project" "$@"
        ;;
    yarn)
        project=$(whichproject)
        yarn "$project" "$@"
        ;;
    *)
        dc "$subcommand" "$@" || lasercommands
        ;;
esac
